{"version":3,"file":"static/js/125.e87248e5.chunk.js","mappings":"oRAEaA,EAAQC,EAAAA,EAAAA,EAAH,mFAMLC,EAAUD,EAAAA,EAAAA,EAAH,mEAIPE,EAAYF,EAAAA,EAAAA,IAAH,iE,SCuBtB,EA7BgB,WACd,IAAQG,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAWA,OATAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,mGACQD,EADR,UACyBE,EAAAA,EAAAA,IAAgBN,GADzC,kFAEkBO,QAAQC,QAF1B,0DADc,uBAAC,WAAD,wBAKdC,EACD,GAAE,CAACT,KAIF,SAACD,EAAD,UACII,EAAQO,QAEL,wBACAP,EAAQQ,KAAI,SAAAC,GAAI,OACf,2BACE,UAAChB,EAAD,sBAAgBgB,EAAKC,WACrB,SAACf,EAAD,UAAUc,EAAKE,YAFRF,EAAKG,GADC,OAFhB,sEAYV,C,4PChCDC,IAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAU,mCACVC,EAAM,kBAAcD,EAAd,uCAECE,EAAa,kCACbC,EAAa,mCAEnB,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,oGACkBL,IAAAA,IAAA,6BAAgCE,IADlD,cACCI,EADD,yBAEEA,EAASC,KAAKC,SAFhB,kEAIA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA8BC,GAA9B,uFACkBV,IAAAA,IAAA,6BACCU,EADD,mBACuBR,IAFzC,cACCI,EADD,yBAIEA,EAASC,KAAKC,SAJhB,kEAMA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA+B3B,GAA/B,uFACkBgB,IAAAA,IAAA,gBACZhB,EADY,oBACOiB,EADP,oBADlB,cACCK,EADD,yBAIEA,EAASC,MAJX,kEAMA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAA+B5B,GAA/B,gGAEoBgB,IAAAA,IAAA,gBACdhB,EADc,6BACciB,EADd,oBAFpB,cAEGK,EAFH,yBAKIA,EAASC,KAAKM,MALlB,gCAMItB,QAAQC,QANZ,gFAQA,SAAeF,EAAtB,+CAAO,OAAP,oBAAO,WAA+BN,GAA/B,uFACkBgB,IAAAA,IAAA,gBACZhB,EADY,6BACgBiB,EADhB,oBADlB,cACCK,EADD,yBAIEA,EAASC,KAAKC,SAJhB,kE","sources":["components/MovieReviews/Reviews.styled.jsx","components/MovieReviews/Reviews.jsx","services/API-service.jsx"],"sourcesContent":["import styled from \"@emotion/styled\";\n\nexport const Autor = styled.p`\n  padding: 8px 0;\n  color: #000000;\n  font-weight: 700;\n`;\n\nexport const Content = styled.p`\n  margin-bottom: 20px;\n  color: #000000;\n`;\nexport const Container = styled.div`\n  padding: 8px;\n  margin-bottom: 16px;\n`;","import { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { getMovieReviews } from \"../../services/API-service\";\nimport { Container, Autor, Content } from \"./Reviews.styled\";\n\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    async function getReviews() {\n      try { setReviews(await getMovieReviews(movieId)); }\n      catch (error) { console.error(); }\n    };\n    getReviews();\n  }, [movieId]);\n  // console.log(reviews);\n\n  return (\n    <Container>\n      {!reviews.length\n        ? (<p>We don't have any reviews for this movie.</p>)\n        : (<ul>\n          {reviews.map(item => (\n            <li key={item.id}>\n              <Autor>Author: {item.author}</Autor>\n              <Content>{item.content}</Content>\n            </li>\n          ))}\n        </ul>)\n      }\n    </Container>\n  );\n};\nexport default Reviews;","import axios from \"axios\";\n\naxios.defaults.baseURL = \"https://api.themoviedb.org/3/\";\nconst API_KEY = \"86ce07b8f3d2976f0645a9d5066f9d40\";\nconst params = `api_key=${API_KEY}&language=en-US&include_adult=false`;\n\nexport const posterW500 = \"https://image.tmdb.org/t/p/w500\";\nexport const posterW200 = \"https://image.tmdb.org/t/p/w200/\";\n\nexport async function getTrendyMovies() {\n  const response = await axios.get(`trending/movie/day?${params}`);\n  return response.data.results;\n};\nexport async function getFoundMovies(searchQuery) {\n  const response = await axios.get(\n    `search/movie?query=${searchQuery}&page=1&${params}`\n  );\n  return response.data.results;\n};\nexport async function getMovieDetails(movieId) {\n  const response = await axios.get(\n    `movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\nexport async function getMovieCredits(movieId) {\n  try {\n    const response = await axios.get(\n    `movie/${movieId}/credits?&api_key=${API_KEY}&language=en-US`\n  );\n    return response.data.cast;\n  } catch {console.error();}\n};\nexport async function getMovieReviews(movieId) {\n  const response = await axios.get(\n    `movie/${movieId}/reviews?&api_key=${API_KEY}&language=en-US`\n  );\n  return response.data.results;\n};\n"],"names":["Autor","styled","Content","Container","movieId","useParams","useState","reviews","setReviews","useEffect","getMovieReviews","console","error","getReviews","length","map","item","author","content","id","axios","API_KEY","params","posterW500","posterW200","getTrendyMovies","response","data","results","getFoundMovies","searchQuery","getMovieDetails","getMovieCredits","cast"],"sourceRoot":""}